{"version":3,"sources":["components/CartHead.jsx","components/CartItem.jsx","components/CartBody.jsx","App.js","serviceWorker.js","index.js"],"names":["CartHead","props","className","totalItems","onClick","onReset","CartItem","this","event","title","setBadgeClasses","formatCt","onIncrement","onRemove","id","badgeclasses","value","Component","CartBody","events","map","key","reducer","accumulator","item","jsonData","JSON","parse","stringify","jsonRaw","App","handleEnrollButton","tmpEvents","state","i","indexOf","setState","handleRemoveButton","eventId","filter","c","handleResetButton","ct","window","location","reload","bind","reduce","Boolean","hostname","match","Index","Helmet","charSet","name","content","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b14a70c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CartHead = props => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th className='border-0 bg-light'>\r\n                    <div className='py-2 text-uppercase'>Events/Courses</div>\r\n                </th>\r\n                <th className='border-0 bg-light'>\r\n                    <div className='py-2 text-uppercase'>Quantity</div>\r\n                </th>\r\n                <th className='border-0 bg-light'>\r\n                    <div className='py-2 text-uppercase'>\r\n                        <span className='badge badge-pill badge-info'>\r\n                            Total: {props.totalItems}\r\n                        </span>\r\n                    </div>\r\n                </th>\r\n                <th className='border-0 bg-light'>\r\n                    <button\r\n                        className='btn btn-danger btn-small px-3 py-1 rounded-pill text-uppercase'\r\n                        onClick={props.onReset}\r\n                    >\r\n                        Reset\r\n                    </button>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default CartHead;\r\n","import React, { Component } from 'react';\r\nimport './CartItem.css';\r\n\r\nclass CartItem extends Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <th className='text-secondary'>{this.props.event.title}</th>\r\n                <td>\r\n                    <span className={this.setBadgeClasses()}>\r\n                        {this.formatCt()}\r\n                    </span>\r\n                </td>\r\n                <td>\r\n                    <button\r\n                        onClick={() => this.props.onIncrement(this.props.event)}\r\n                        className='btn btn-info btn-sm m-2 rounded-pill'\r\n                    >\r\n                        Enroll\r\n                    </button>\r\n                </td>\r\n                <td>\r\n                    <button\r\n                        onClick={() => this.props.onRemove(this.props.event.id)}\r\n                        className='btn btn-warning btn-sm m-2 rounded-pill'\r\n                    >\r\n                        Remove\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    setBadgeClasses() {\r\n        let badgeclasses = 'badge m-2 ';\r\n        badgeclasses +=\r\n            this.props.event.value === 0\r\n                ? 'badge-danger'\r\n                : 'badge-info badge-pill';\r\n        return badgeclasses;\r\n    }\r\n\r\n    formatCt() {\r\n        const { value } = this.props.event;\r\n        return value === 0 ? 'Zero' : value;\r\n    }\r\n}\r\n\r\nexport default CartItem;\r\n","import React, { Component } from 'react';\r\nimport CartItem from './CartItem';\r\n\r\nclass CartBody extends Component {\r\n    render() {\r\n        return (\r\n            <tbody>\r\n                {this.props.events.map(event => {\r\n                    return (\r\n                        <CartItem\r\n                            key={event.id}\r\n                            event={event}\r\n                            onRemove={this.props.onRemove}\r\n                            onIncrement={this.props.onIncrement}\r\n                        />\r\n                    );\r\n                })}\r\n            </tbody>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CartBody;\r\n","import React, { Component } from 'react';\nimport CartHead from './components/CartHead';\nimport CartBody from './components/CartBody';\nimport './App.css';\nimport jsonRaw from './components/events.json';\n\nconst reducer = (accumulator, item) => accumulator + item.value;\nconst jsonData = JSON.parse(JSON.stringify(jsonRaw));\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: jsonData.events,\n        };\n        this.handleEnrollButton = this.handleEnrollButton.bind(this);\n        this.handleRemoveButton = this.handleRemoveButton.bind(this);\n        this.handleResetButton = this.handleResetButton.bind(this);\n    }\n\n    handleEnrollButton = event => {\n        const tmpEvents = [...this.state.events];\n        const i = tmpEvents.indexOf(event);\n        tmpEvents[i] = { ...event };\n        tmpEvents[i].value++;\n        this.setState({ events: tmpEvents });\n    };\n\n    handleRemoveButton = eventId => {\n        const tmpEvents = this.state.events.filter(c => c.id !== eventId);\n        this.setState({ events: tmpEvents });\n    };\n\n    handleResetButton = () => {\n        const tmpEvents = this.state.events.map(ct => {\n            ct.value = 0;\n            return ct;\n        });\n        this.setState({ events: tmpEvents });\n        window.location.reload(true);\n    };\n\n    render() {\n        return (\n            <>\n                <div className='table-responsive'>\n                    <table className='table'>\n                        <CartHead\n                            totalItems={this.state.events.reduce(reducer, 0)}\n                            onReset={this.handleResetButton}\n                        />\n                        <CartBody\n                            events={this.state.events}\n                            onRemove={this.handleRemoveButton}\n                            onIncrement={this.handleEnrollButton}\n                        />\n                    </table>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Helmet } from 'react-helmet';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Index extends React.Component {\n    render() {\n        return (\n            <>\n                <Helmet>\n                    <meta charSet='utf-8' />\n                    <title>Enrollment</title>\n                    <meta name='description' content='Enrollment cart' />\n                    <meta name='keywords' content='Enrollment, Cart' />\n                </Helmet>\n                <div className='px-4 px-lg-0'>\n                    <header className='container text-white py-5 text-center'>\n                        <h1 className='display-4'>Working with ReactJS</h1>\n                        <p className='lead mb-0'>\n                            Please enroll your interested events and courses.\n                        </p>\n                        <p className='lead'>Made with Bootstrap 4</p>\n                    </header>\n                    <div className='container pb-5'>\n                        <div className='row '>\n                            <div className='col-lg-12 p-5 bg-white rounded shadow-lg mb-5'>\n                                <App />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}